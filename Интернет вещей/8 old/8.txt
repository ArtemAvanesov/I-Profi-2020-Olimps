# Перед занесением в базу данных пароля с ним производятся следующие действия: 
# если последний символ - цифра, то справа приписывается число, полученное по формуле 
# x=a!?F(a), где x - искомое число, a - цифра, на которую оканчивается пароль,
# F - функция получения числа Фибоначчи с номером a. 
# Если последний символ - буква, то её регистр изменяется. 
# Затем вычисляется среднее арифметическое всех цифр в пароле с точностью до целого в
# большую сторону и приписывается в начало строки (слева), если чисел нет, то приписывается символ @. 
# Затем полученная строка хэшируется алгоритмом MD5. 
# Необходимо реализовать описанный алгоритм на одном из языков программирования. 
# На стандартный вход подается строка (максимальная длинна 20 символов).
# На стандартный вывод программа должна подавать строку хэша.
# Пример 1
# Ввод
# IoT2018
# Вывод
# 71630d41201ec016db994fb5369c1cf4
# Пример 2
# Ввод
# IoT_Russia
# Вывод
# a79f2e15efd8a4a5211fbb35e22f1c47

import numpy as np
import math
import hashlib

def fib(x):
    if x==1 or x==0:
        return 1
    return fib(x-1)+fib(x-2)

f=open("input.txt")
stroka=f.readline()
f.close()

if(stroka[len(stroka)-1]<='9' and stroka[len(stroka)-1]>='0'):
    x=int(stroka[len(stroka)-1])
    x=math.factorial(x)-fib(x-1)
    stroka += np.str(x)
else:
    if (stroka[len(stroka) - 1] <= 'Z' and stroka[len(stroka) - 1] >= 'A'):
        stroka=stroka[0:len(stroka) - 1]+chr(ord(stroka[len(stroka) - 1])+32)
    if (stroka[len(stroka) - 1] <= 'z' and stroka[len(stroka) - 1] >= 'a'):
        str = stroka[0:len(stroka) - 1] +chr(ord(stroka[len(stroka) - 1])-32)

sum=0
count=0
for i in range(len(stroka)):
    if (stroka[i] <= '9' and stroka[i] >= '0'):
        sum+=int(stroka[i])
        count+=1
if sum==0:
    stroka = "@" + stroka
else:
    stroka=np.str(math.ceil(sum/count))+stroka

stroka=stroka.encode('UTF-8')
m=hashlib.md5()
m.update(stroka)
f=open("output.txt",'w')
f.write(m.hexdigest())
f.close()
print("Done!")